{"version":3,"sources":["App.js","getWeb3.js","ipfs.js","serviceWorker.js","index.js"],"names":["App","state","ipfsHash","storageValue","web3","buffer","accounts","contract","ipfsToEncode","ipfsEncoded","bs58ToDecode","bs58Decoded","componentDidMount","a","getWeb3","eth","getAccounts","net","getId","networkId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","address","setState","alert","console","error","captureFile","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","log","onSubmit","ipfs","add","path","bs58ifpsHash","getBytes32FromIpfsHash","getIpfsHashFromBytes32","methods","save","send","from","getOwner","call","response","back2ifpsHash","encode","decode","ipfsListing","bs58","slice","toString","bytes32Hex","hashHex","hashBytes","handleSubmitDec","handleSubmitEnc","evt","this","value","className","src","alt","type","onChange","href","updateInputValue","updateDecodedInputValue","Component","Promise","resolve","reject","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider","create","host","port","protocol","headers","authorization","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"24vdAUMA,G,yNACJC,MAAQ,CACNC,SAAU,GACVC,aAAc,EACdC,KAAM,KACNC,OAAQ,KACRC,SAAU,KACVC,SAAU,KACVC,aAAc,KACdC,YAAa,KACbC,aAAc,KACdC,YAAa,M,EAGfC,kB,sBAAoB,oCAAAC,EAAA,+EAGGC,cAHH,cAGVV,EAHU,gBAMOA,EAAKW,IAAIC,cANhB,cAMVV,EANU,gBASQF,EAAKW,IAAIE,IAAIC,QATrB,OASVC,EATU,OAUVC,EAAkBC,EAAsBC,SAASH,GACjDI,EAAW,IAAInB,EAAKW,IAAIS,SAC5BH,EAAsBI,IACtBL,GAAmBA,EAAgBM,SAKrC,EAAKC,SAAS,CAAEvB,OAAME,WAAUC,SAAUgB,IAlB1B,kDAqBhBK,MAAM,0EAGNC,QAAQC,MAAR,MAxBgB,0D,EA4BpBC,YAAc,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OAAOC,MAAM,GAC1BC,EAAS,IAAIC,OAAOC,WAC1BF,EAAOG,kBAAkBN,GACzBG,EAAOI,UAAY,WACjB,EAAKd,SAAS,CAAEtB,OAAQqC,EAAOL,EAAOM,UACtCd,QAAQe,IAAI,SAAU,EAAK3C,MAAMI,U,EAIrCwC,S,uCAAW,WAAOb,GAAP,2BAAAnB,EAAA,+DAC4B,EAAKZ,MAAlCK,EADC,EACDA,SAAUC,EADT,EACSA,SADT,EACmBH,KAC5B4B,EAAMC,iBACNJ,QAAQe,IAAI,aAHH,SAKUE,IAAKC,IAAI,EAAK9C,MAAMI,QAL9B,cAKLsC,EALK,OAMTd,QAAQe,IAAI,SAAUD,EAAOK,MAEzBC,EAAe,EAAKC,uBAAuBP,EAAOK,MACtDnB,QAAQe,IAAI,oBAAqBK,GACjCpB,QAAQe,IAAI,uBAAwB,EAAKO,uBAAuBF,IAGhEpB,QAAQe,IAAI,WAAYK,GAbf,UAiBH1C,EAAS6C,QAAQC,KAAKJ,GAAcK,KAAK,CAAEC,KAAMjD,EAAS,KAjBvD,yBAwBcC,EAAS6C,QAAQI,SAASP,GAAcQ,OAxBtD,QAwBHC,EAxBG,OA0BT7B,QAAQe,IAAI,WAAYc,GAEpBC,EAAgB,EAAKR,uBAAuBF,GAChD,EAAKtB,SAAS,CAAEzB,SAAWyD,IAC3B9B,QAAQe,IAAI,mBAAoBe,GA9BvB,4C,wDAiCXC,OAAS,SAAC5B,GACRH,QAAQe,IAAIZ,I,EAGd6B,OAAS,SAAC7B,GACRH,QAAQe,IAAIZ,I,EAGdkB,uBAAyB,SAACY,GACxB,MAAO,KAAKC,IAAKF,OAAOC,GAAaE,MAAM,GAAGC,SAAS,Q,EAOzDd,uBAAyB,SAACe,GAIxB,IAAMC,EAAU,OAASD,EAAWF,MAAM,GACpCI,EAAY1B,EAAOa,KAAKY,EAAS,OAEvC,OADgBJ,IAAKH,OAAOQ,I,EAI9BC,gBAAkB,SAACrC,GACjBA,EAAMC,iBACNJ,QAAQe,IAAI,EAAK3C,MAAMS,cACvB,IACE,EAAKiB,SAAS,CACZhB,YAAa,EAAKwC,uBAAuB,EAAKlD,MAAMS,gBAEvD,MAAOoB,GACNF,MAAM,gCACJC,QAAQC,MAAMA,K,EAIpBwC,gBAAkB,SAACtC,GACjBA,EAAMC,iBACNJ,QAAQe,IAAI,EAAK3C,MAAMO,cACvB,IACE,EAAKmB,SAAS,CACZlB,YAAa,EAAKyC,uBAAuB,EAAKjD,MAAMO,gBAEvD,MAAOsB,GACJF,MAAM,gCACNC,QAAQC,MAAMA,K,gFAIHyC,GAIfC,KAAK7C,SAAS,CACZnB,aAAc+D,EAAIpC,OAAOsC,QAE3B5C,QAAQe,IAAI4B,KAAKvE,MAAMO,gB,8CAGD+D,GAGtBC,KAAK7C,SAAS,CACZjB,aAAc6D,EAAIpC,OAAOsC,QAE3B5C,QAAQe,IAAI4B,KAAKvE,MAAMS,gB,+BAGf,IAAD,OACP,OAAK8D,KAAKvE,MAAMG,KAId,yBAAKsE,UAAU,OACb,0CACM,sFACA,yBAAKC,IAAG,+BAA0BH,KAAKvE,MAAMC,UAAY0E,IAAI,KAC7D,4CACA,0BAAM/B,SAAU2B,KAAK3B,UACnB,2BAAOgC,KAAK,OAAOC,SAAUN,KAAKzC,cAClC,2BAAO8C,KAAK,YAEd,6CAAmBL,KAAKvE,MAAMK,SAAS,IACvC,0CAAgBkE,KAAKvE,MAAMC,UAC3B,4BAAI,uBAAG6E,KAAI,+BAA0BP,KAAKvE,MAAMC,UAAYiC,OAAO,UAA/D,mBAGJ,6BAAS,6BAAS,6BAAS,6BAC3B,0BAAMU,SAAU2B,KAAKF,iBACnB,0CACA,2BAAOQ,SAAU,SAAAP,GAAG,OAAI,EAAKS,iBAAiBT,OAE9C,2BAAOM,KAAK,YAEd,sDArBR,IAqByCL,KAAKvE,MAAMQ,YAG5C,6BAAS,6BAAS,6BAAS,6BAC3B,0BAAMoC,SAAU2B,KAAKH,iBACnB,uCACA,2BAAQS,SAAU,SAAAP,GAAG,OAAI,EAAKU,wBAAwBV,OAEtD,2BAAOM,KAAK,YAEd,sDA/BR,IA+ByCL,KAAKvE,MAAMU,aAlC7C,4E,GA/JKuE,cAuMHlF,Q,uGC5KAc,IAnCC,kBACd,IAAIqE,SAAQ,SAACC,EAASC,GAEpB/C,OAAOgD,iBAAiB,OAAxB,sBAAgC,kCAAAzE,EAAA,0DAE1ByB,OAAOiD,SAFmB,wBAGtBnF,EAAO,IAAIoF,IAAKlD,OAAOiD,UAHD,kBAMpBjD,OAAOiD,SAASE,SANI,OAQ1BL,EAAQhF,GARkB,gDAU1BiF,EAAO,EAAD,IAVoB,gCAcrB/C,OAAOlC,MAERA,EAAOkC,OAAOlC,KACpByB,QAAQe,IAAI,2BACZwC,EAAQhF,KAIFsF,EAAW,IAAIF,IAAKG,UAAUC,aAClC,yBAEIxF,EAAO,IAAIoF,IAAKE,GACtB7D,QAAQe,IAAI,gDACZwC,EAAQhF,IA3BoB,+D,iCCLpC,aAEM0C,EAAO+C,iBAAO,CAChBC,KAAM,iBACNC,KAAM,OACNC,SAAU,QACVC,QAAS,CACPC,cAAe,6CAGNpD,O,ugBCEKqD,QACW,cAA7B7D,OAAO8D,SAASC,UAEe,UAA7B/D,OAAO8D,SAASC,UAEhB/D,OAAO8D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACxG,EAAA,EAAD,MAASyG,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b40c0b36.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\nimport ipfs from './ipfs'\nimport bs58 from 'bs58'\nimport { useState } from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n    ipfsHash: '',\n    storageValue: 0, \n    web3: null,\n    buffer: null, \n    accounts: null, \n    contract: null ,\n    ipfsToEncode: null,\n    ipfsEncoded: null,\n    bs58ToDecode: null,\n    bs58Decoded: null\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  captureFile = (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  onSubmit = async (event) => {\n    const { accounts, contract, web3 } = this.state;\n    event.preventDefault()\n    console.log(\"start add\");\n    \n    let result = await ipfs.add(this.state.buffer);\n    console.log(\"result\", result.path)\n    \n    let bs58ifpsHash = this.getBytes32FromIpfsHash(result.path)\n    console.log(\"into bs58ifpsHash\", bs58ifpsHash)\n    console.log(\"reverse bs58ifpsHash\", this.getIpfsHashFromBytes32(bs58ifpsHash));\n    \n    \n    console.log(\"ifpsHash\", bs58ifpsHash);\n\n    // Stores a given value, 5 by default.\n    \n    await contract.methods.save(bs58ifpsHash).send({ from: accounts[0] });\n    // await contract.methods.set(result).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.getOwner(bs58ifpsHash).call();\n\n    console.log(\"getOwner\", response);\n\n    let back2ifpsHash = this.getIpfsHashFromBytes32(bs58ifpsHash)\n    this.setState({ ipfsHash:  back2ifpsHash})\n    console.log(\"out bs58ifpsHash\", back2ifpsHash)\n  }\n\n  encode = (event) => {\n    console.log(event);\n  }\n\n  decode = (event) => {\n    console.log(event);\n  }\n\n  getBytes32FromIpfsHash = (ipfsListing) => {\n    return \"0x\"+bs58.decode(ipfsListing).slice(2).toString('hex')\n  }\n  \n  // Return base58 encoded ipfs hash from bytes32 hex string,\n  // E.g. \"0x017dfd85d4f6cb4dcd715a88101f7b1f06cd1e009b2327a0809d01eb9c91f231\"\n  // --> \"QmNSUYVKDSvPUnRLKmuxk9diJ6yS96r1TrAXzjTiBcCLAL\"\n  \n  getIpfsHashFromBytes32 = (bytes32Hex) => {\n    // Add our default ipfs values for first 2 bytes:\n    // function:0x12=sha2, size:0x20=256 bits\n    // and cut off leading \"0x\"\n    const hashHex = \"1220\" + bytes32Hex.slice(2)\n    const hashBytes = Buffer.from(hashHex, 'hex');\n    const hashStr = bs58.encode(hashBytes)\n    return hashStr\n  }\n\n  handleSubmitDec = (event) => {\n    event.preventDefault();\n    console.log(this.state.bs58ToDecode);\n    try{\n      this.setState({\n        bs58Decoded: this.getIpfsHashFromBytes32(this.state.bs58ToDecode)\n      });\n    }catch (error) {\n      alert(\"The bs58 value is not valid!\");\n        console.error(error);\n    }\n  }\n\n  handleSubmitEnc = (event) => {\n    event.preventDefault();\n    console.log(this.state.ipfsToEncode);\n    try{\n      this.setState({\n        ipfsEncoded: this.getBytes32FromIpfsHash(this.state.ipfsToEncode)\n      });\n    }catch (error) {\n        alert(\"The IPFS value is not valid!\");\n        console.error(error);\n    }\n  }\n\n  updateInputValue(evt) {\n    // const val = evt.target.value;\n    \n    // ...\n    this.setState({\n      ipfsToEncode: evt.target.value\n    });\n    console.log(this.state.ipfsToEncode);\n  }\n\n  updateDecodedInputValue(evt) {\n    // const val = evt.target.value;\n    // ...\n    this.setState({\n      bs58ToDecode: evt.target.value\n    });\n    console.log(this.state.bs58ToDecode);\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Your Image</h1>\n              <p>This image is stored on IPFS & The Ethereum Blockchain!</p>\n              <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} alt=\"\"/>\n              <h2>Upload Image</h2>\n              <form onSubmit={this.onSubmit} >\n                <input type='file' onChange={this.captureFile} />\n                <input type='submit' />\n              </form>\n              <h4>Your Address: {this.state.accounts[0]}</h4>\n              <h4>Your IPFS: {this.state.ipfsHash}</h4>\n              <h4><a href={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} target=\"_blank\">Your IPFS Link</a></h4>\n              \n\n              <br></br><br></br><br></br><br></br>\n              <form onSubmit={this.handleSubmitEnc}>\n                <label>IPFS Id:\n                <input onChange={evt => this.updateInputValue(evt)}/>\n                </label>\n                <input type=\"submit\" />\n              </form>\n              <h4>IPFS encoded to bs58: </h4> {this.state.ipfsEncoded}\n\n\n              <br></br><br></br><br></br><br></br>\n              <form onSubmit={this.handleSubmitDec}>\n                <label>bs58:\n                <input  onChange={evt => this.updateDecodedInputValue(evt)}/>\n                </label>\n                <input type=\"submit\" />\n              </form>\n              <h4>bs58 decoded to IPFS: </h4> {this.state.bs58Decoded}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import { create } from 'ipfs-http-client'\n\nconst ipfs = create({ \n    host: 'ipfs.infura.io', \n    port: '5001', \n    protocol: 'https',\n    headers: {\n      authorization: 'Bearer ' + \"13ac5c203e204f1bbd367ab09b88e530\"\n    } })\n\nexport default ipfs;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}